| 항목                  | 설명                                             |
| ------------------- | ---------------------------------------------- |
| 📌 **기초 알고리즘 복습**   | 배열, 문자열, 정렬, 스택/큐, 해시맵, 트리/그래프 순회 등            |
| 📌 **시간복잡도 감각 회복**  | O(N^2), O(logN), O(NlogN) 등 실행 시간 감별 감각을 되살릴 것 |
| 📌 **자주 나오는 패턴 파악** | 슬라이딩 윈도우, 투 포인터, 백트래킹, 재귀 등 문제 유형별 패턴 정리       |

| 자바 문법           | 준비할 내용                                                   |
| --------------- | -------------------------------------------------------- |
| `Map`, `Set`    | 정렬된 맵 (`TreeMap`), 빈도수 카운트 (`HashMap`)                   |
| `List` 다루기      | 정렬, 삽입, 삭제, 서브리스트, 반복문 속 수정 주의                           |
| `Comparator` 정렬 | 객체 정렬, 람다식 정렬, `Collections.sort()` vs `stream.sorted()` |
| `PriorityQueue` | 우선순위 큐의 기본, 커스텀 정렬                                       |
| `StringBuilder` | 문자열 반복, 삽입, 삭제 시 사용                                      |

※기출사이트
프로그래머스 – 한국 기업 테스트에 많이 사용됨.
백준 – 단계별 문제 연습 가능.
LeetCode – 글로벌 코딩테스트 대비.
HackerRank – 실무 기반 문제 경험.
Tip: 중급 문제 위주로 30분 안에 풀기 타이머 설정하고 연습

| 실수 유형         | 예방 방법                        |
| ------------- | ---------------------------- |
| 입력값 이상치 처리 누락 | 항상 **빈 배열, null, 최대값** 등 테스트 |
| 인덱스 범위 오류     | `i - 1`, `i + 1` 인덱스 조심      |
| 오타 및 오출력      | 리턴 형식과 요구 출력 형식 명확히 확인       |

※코딩테스트 전날 / 당일 전략
전날: 이미 푼 문제 복습 + 자바 API 리마인드
당일: 빠르게 풀 수 있는 쉬운 문제 먼저 해결 → 시간 안배 전략!
제출 전: 테스트케이스 3~5개 돌려보기, System.out.println 남겨두지 않기

※정렬 기준 커스텀 Comparator 구현
HashMap을 이용한 문자열 중복 처리
BFS/DFS를 이용한 경로 탐색 문제
재귀 기반 문제 (예: 괄호 생성, 백트래킹)
슬라이딩 윈도우로 최대값 찾기 문제

1주일 코딩테스트 준비
| 요일        | 주제                     | 목표 및 내용                                                                                                | 문제 추천                                                        |
| --------- | ---------------------- | ------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------ |
| **Day 1** | ✅ 자바 문법 복습 + 입출력       | - Scanner, BufferedReader/Writer<br>- StringBuilder, Arrays.sort, Collections.sort<br>- Comparator 사용법 | - \[프로그래머스] 문자열 내림차순 정렬<br>- \[백준] 단어 정렬                     |
| **Day 2** | ✅ 배열/문자열/리스트 처리        | - 자주 나오는 기초 자료구조<br>- 투 포인터 / 슬라이딩 윈도우 개념 이해                                                           | - \[LeetCode] Two Sum<br>- \[프로그래머스] 가장 긴 팰린드롬               |
| **Day 3** | ✅ Map/Set/Hash         | - 중복 제거, 빈도수 카운트<br>- HashMap, TreeMap 차이 이해                                                           | - \[백준] 숫자 카드<br>- \[프로그래머스] 완주하지 못한 선수                      |
| **Day 4** | ✅ 정렬 / 우선순위 큐          | - Comparator 커스터마이징<br>- PriorityQueue 익히기                                                             | - \[프로그래머스] 이중우선순위큐<br>- \[LeetCode] Top K Frequent Elements |
| **Day 5** | ✅ 재귀 / 백트래킹 / DFS/BFS  | - 깊이우선/너비우선 탐색 감각 익히기<br>- 백트래킹 패턴 이해                                                                  | - \[백준] 유기농 배추 (BFS)<br>- \[프로그래머스] 단어 변환                    |
| **Day 6** | ✅ 정리 + 모의 실전 (1시간 테스트) | - 난이도 중간 문제 2\~3개 1시간 안에 풀기<br>- 예외 케이스 테스트 + 제출 연습                                                    | - \[프로그래머스] 코딩테스트 연습 중급<br>- \[백준 실버2\~골드5 문제]               |
| **Day 7** | ✅ 복습 + 기업 유형 분석        | - 자주 틀린 문제 다시 풀기<br>- 타겟 기업 출제 스타일 분석<br>- 실전 제출 전략 점검                                                 | - \[이력서 기업 기준 검색]<br>- \[HackerRank] Java test practice      |

| 유형         | 예시 문제                                          | 플랫폼                  |
| ---------- | ---------------------------------------------- | -------------------- |
| 배열/문자열     | Longest Substring Without Repeating Characters | LeetCode             |
| 정렬/탐색      | Kth Largest Element, Binary Search             | LeetCode             |
| 해시/슬라이딩윈도우 | Anagrams, Subarray Sum Equals K                | HackerRank           |
| DFS/BFS    | Word Ladder, Island Count                      | LeetCode             |
| DP         | House Robber, Coin Change                      | LeetCode             |
| 트리/그래프     | Lowest Common Ancestor, Topological Sort       | Codility, HackerRank |
